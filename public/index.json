[
{
	"uri": "//localhost:1313/",
	"title": "Deploy Nestjs website to AWS",
	"tags": [],
	"description": "",
	"content": "Deploy Nestjs website to AWS Overview In this lab, you will be guided on how to deploy a website running the Nestjs API backend to AWS platform. With optimal support services such as EC2, VPC, S3, Cloudfront,\u0026hellip;, your website will operate quickly, meeting the strict requirements of users. Introducing Amazon Elastic Compute Cloud (EC2) Amazon EC2 is a service that provides scalable cloud computing capabilities on AWS. Some key features:\nAmazon EC2 operates similarly to traditional virtual or physical servers, but with the ability to quickly initialize, flexibly scale resources and simple management.\nVirtual Server divides a physical server into multiple virtual servers, optimizing the use of hardware resources.\nAmazon EC2 supports a variety of workloads such as: web hosting, applications, databases, authentication services, and any task that a regular server can perform.\nIntroducing Amazon Virtual Private Cloud (Amazon VPC) Amazon VPC is a custom virtual network service within AWS Cloud, allowing you to create a separate and completely isolated network environment from the outside world. This concept is similar to designing and deploying a standalone network in a traditional on-premises data center. Key Features:\nFull control over your virtual network environment Instantiate and manage AWS resources Customize IP address ranges and network segments Flexible routing and networking configuration Full IPv4 and IPv6 support Introducing Amazon Simple Storage Service (Amazon S3) Amazon Simple Storage Service (Amazon S3) is an object storage service that provides on-demand scalability, ensuring the highest levels of data availability, security, and performance.\nS3 is built to meet the needs of customers of all sizes and industries, who can use it to store and protect any amount of data.\nS3 can be used for a variety of use cases such as data warehouses, websites, mobile applications, backup and restore, archiving, enterprise applications, IoT devices, and big data analytics. Additionally, Amazon S3 provides easy-to-use management features that help you organize your data and configure access controls to meet your specific business, organizational, and compliance requirements.\nAmazon S3 is designed to provide 99.999999999% (11 9â€™s) durability and stores data for millions of applications for companies worldwide.\nIntroducing Amazon Cloudfront Amazon CloudFront is a content delivery network (CDN) service from Amazon Web Services (AWS). It accelerates the delivery of web, video, application, and API content to users globally by serving content from edge locations closest to users, reducing latency and improving performance.\nKey Features:\nGlobal CDN: CloudFront has a network of edge locations around the world, enabling content delivery closer to users, reducing page load times and improving user experience.\nStatic and dynamic content delivery: CloudFront supports both static content (e.g. images, CSS, JavaScript) and dynamic content (e.g. dynamically generated web pages).\nIntegration with AWS: CloudFront integrates well with other AWS services such as Amazon S3, Amazon EC2, making it easy for companies already using AWS to deploy and manage a CDN.\nSecurity: CloudFront provides security features such as SSL/TLS encryption, access control, and integration with AWS Shield to protect against DDoS attacks.\nCost Optimization: CloudFront helps optimize costs by offloading origin servers, reducing bandwidth, and providing flexible pricing options.\nOther Features: CloudFront also supports features such as video delivery, cache management, and geographic access restrictions.\nIntroducing AWS Cognito AWS Cognito allows us to easily build login, registration, email verification, password change, password reset, etc. flows, instead of having to build DBs for users and perform many operations such as JWT, password hashing, sending verification emails, etc. This helps you focus on developing other features of the application. Users can log in directly with username and password or through third parties such as Facebook, Amazon, Google, or Apple. The two main components of Amazon Cognito are user groups and identity groups:\nUser groups: a user directory that provides sign-up and sign-in options for your web and mobile app users. Once signed in with a user group, app users can access the resources the app allows.\nIdentity groups: give your users access to other AWS services.\nIntroducing Amazon EC2 Auto Scaling Group 1. Why use Auto scaling group?\nWhen our application is put into operation, the number of visitors will change over time, so we need to regularly change (scaling) the number of instances to improve availability and save costs. To automate and be flexible in scaling work, we will have the solution of Auto Scaling Group.\n2. Overview of Auto Scaling Group\nAmazon EC2 Auto Scaling Group (ASG) helps automatically adjust the number of EC2 instances according to the needs of the application. ASG can automatically scale up (scale out) when traffic increases, or scale down (scale in) when traffic decreases, helping to optimize resources and reduce costs. It also helps ensure high availability by distributing instances across multiple Availability Zones to maintain continuous operation even if part of the system fails.\nIntroducing Elastic Load Balancer Elastic Load Balancer (ELB) is a service that helps distribute workloads (traffic) evenly across multiple servers or instances to ensure stable system operation and avoid overloading any one server. It helps optimize performance, increase availability, and ensure that if a server fails, traffic will be redirected to other servers without affecting users.\nAWS provides three types of Load Balancers:\nApplication Load Balancer (ALB): Optimized for HTTP/HTTPS traffic, operating at the application layer (Layer 7) Network Load Balancer (NLB): Handles traffic at the transport layer (Layer 4), suitable for applications requiring extremely high performance Gateway Load Balancer (GWLB): Used to deploy and manage virtual network devices In this tutorial, we will use Application Load Balancer (ALB) to optimize HTTP/HTTPS traffic.\nIntroducing ElastiCache This service may be expensive, please consider before using.\nElastiCache is an AWS service that allows us to create a Memcached or Redis cluster easily instead of having to install and configure many things ourselves.\nAWS ElastiCache will cover the following for us:\nInstallation: when we create an ElastiCache, AWS will automatically install the necessary things for Memcached and Redis below it, we just need to wait for it to finish installing and use it.\nAdministration: we don\u0026rsquo;t need to worry about the system admin\u0026rsquo;s work for an ElastiCache, AWS will do it for us.\nMonitoring: ElastiCache will push its metrics to CloudWatch.\nBackups: AWS has an option for us to automatically backup cache data (redis only).\nNotification Services 1. Amazon Cloudtrail\nAWS CloudTrail is an Amazon Web Services (AWS) service that records activity in your AWS account, including actions taken by users, roles, or AWS services. It acts as an auditing and monitoring tool, recording events as logs, allowing users to review activity history, analyze risks, and ensure regulatory compliance.\n2. Amazon Cloudwatch\nAmazon CloudWatch is a monitoring and management service that provides actionable data and insights for AWS infrastructure resources and applications, hybrid applications, and on-premises applications. You can collect and access all performance and operational data in the form of logs and metrics in one platform, instead of monitoring them individually (server, network, or database). CloudWatch enables you to monitor end-to-end (applications, infrastructure, and services) and leverage alerts, logs, and event data to automate actions and reduce Mean Time To Resolution (MTTR). This service frees up critical resources and allows you to focus on building applications and business value.\n3. Simple Notification Service(AWS SNS)\nAWS SNS (Simple Notification Service) is a messaging service from Amazon Web Services (AWS) that allows developers to send notifications to subscribers or other applications. It operates on a publish/subscribe model, where publishers send messages to topics, and subscribers receive notifications from topics they are interested in.\n4. Amazon Simple Queue Service(AWS SQS)\nAWS SQS, or Amazon Simple Queue Service, is a fully managed, distributed message queuing service provided by AWS that enables applications and distributed systems to communicate with each other in a flexible and reliable way. SQS helps decouple application components, allowing them to operate independently and increase scalability and fault tolerance.\nMain content Preparation Create Auto Scaling for Nestjs Instance Initialize Cloudfront for Web Server Clean up resources "
},
{
	"uri": "//localhost:1313/1-create-new-aws-account/1.1-set-up-vpc-and-subnet/",
	"title": "Initialize VPC and Subnet",
	"tags": [],
	"description": "",
	"content": "View AWS account identifiers Create VPC Go to AWS Management Console. Find VPC\nSelect VPC\nIn the VPC interface Select Your VPCs\nSelect Create VPC\nOptions in VPC Wizard Select VPC and more Fill in the VPC name Enter CIDR: 192.168.0.0/16 Select the number of public/private subnets: 2 Select Create VPC "
},
{
	"uri": "//localhost:1313/2-mfa-setup-for-aws-user-root/2.1-setup-ec2-instance/",
	"title": "Launch EC2 Instance",
	"tags": [],
	"description": "",
	"content": "Create EC2 Instance Go to AWS Management Console:\nSearch for EC2 Select EC2 In the EC2 interface:\nSelect Launch instances Configure basic information Name the instance, enter ecourse-backend.\nSelect AMI, select Ubuntu\nIn Instance type, select t2.micro You should choose Instance types belonging to Free tier eligible to avoid fees!!!\nIn Key pair(login), select the key pair just created in 1.3 In Network settings, select Select existing security group. Select the Security group created in 1.2 Select Launch instance "
},
{
	"uri": "//localhost:1313/1-create-new-aws-account/",
	"title": "Preparation Steps",
	"tags": [],
	"description": "",
	"content": "Content:\nPrepare VPC and Subnet Create Security Group for EC2 Create Security Group for Database Instance Initialize EC2 Instance "
},
{
	"uri": "//localhost:1313/1-create-new-aws-account/1.2-create-security-group-for-ec2/",
	"title": "Create Security Group for EC2",
	"tags": [],
	"description": "",
	"content": "Create Security Group for EC2 Create VPC Security group for Amazon EC2 In the VPC interface Select Security Group Select Create security group Proceed to configure Security group name, enter Ecourse-SG Description, enter Security Group for Ecourse Select VPC created Configure Inbound rule To add a rule, select Add rule Custom TCP select port 3000 SSH port 22 used to connect to local machine. Source select My IP HTTP port 80 and source is Anywhere IPv4 HTTPS port 443 and source is Anywhere IPv4 Select Create security group "
},
{
	"uri": "//localhost:1313/2-mfa-setup-for-aws-user-root/2.2-create-elastic-ip/",
	"title": "Initialize Elastic IP",
	"tags": [],
	"description": "",
	"content": " Elastic IP is intended to provide a public IP for EC2 Instance, which will remain the same regardless of whether EC2 is restarted or not.\nIn the Network \u0026amp; Security section of the EC2 interface:\nSelect Elastic IPs Select Allocate Elastic IP address In the Public IPv4 address pool section, select Amazon\u0026rsquo;s pool of IPv4 addresses.\nIn the Network border group section, select the region you want to use, here is us-east-1.\nSelect Allocate.\nAfter creating, in the Elastic IPs interface:\nSelect the newly created IP, select the Actions button, select Associate Elastic IP address In the Resource type section, select Instance\nSelect the newly created Instance\nSelect Associate\n"
},
{
	"uri": "//localhost:1313/2-mfa-setup-for-aws-user-root/",
	"title": "MFA for AWS Accounts",
	"tags": [],
	"description": "",
	"content": "Multi-Factor Authentication (MFA) Setup During the authentication process, you will need to utilize three different MFA devices to ensure the security of your account.\nVirtual MFA Devices (Smartphone Apps): Install the following apps on your smartphone and set them up for MFA:\nMicrosoft Authenticator Google Authenticator Okta Verify Hard U2F Security Key: Obtain a hard U2F security key to enhance your account\u0026rsquo;s security.\nOther Hardware MFA Devices (e.g., Gemalto Security Keys): Consider using additional hardware MFA devices for added protection.\nContent Content 1. Setup with Virtual MFA Device 2. Setup with U2F Security Key 3. Setup with Other Hardware MFA Device 1. Setup with Virtual MFA Device To set up your virtual MFA device using apps on your smartphone, follow these steps:\nStep 1: Install the Microsoft Authenticator, Google Authenticator, and Okta Verify apps on your smartphone. Step 2: Open the app and follow the on-screen instructions to add your account. Step 3: Use the app-generated codes during the MFA authentication process. 2. Setup with U2F Security Key Setting up your U2F security key involves the following steps:\nStep 1: Obtain a compatible U2F security key. Step 2: Connect the key to your device\u0026rsquo;s USB port. Step 3: During authentication, insert the key and follow the prompts to complete the process. 3. Setup with Other Hardware MFA Device Consider using hardware MFA devices like Gemalto security keys for an extra layer of security:\nStep 1: Acquire a Gemalto security key or a similar hardware device. Step 2: Connect and set up the device as per the manufacturer\u0026rsquo;s instructions. Step 3: Integrate the device into your MFA authentication workflow. Remember to keep your MFA devices secure and follow best practices to ensure the safety of your account.\n"
},
{
	"uri": "//localhost:1313/3-create-admin-user-and-group/",
	"title": "Create Admin Group and Admin User",
	"tags": [],
	"description": "",
	"content": "Creating an Admin Group Log in to the Control Panel on the AWS Web Service page.\nClick on your account name at the top right corner and select My Security Credentials.\nNote: If you don\u0026rsquo;t see the My Security Credentials menu, you can click on the search icon and type IAM. Then click on the IAM service to access the IAM management interface.\nOn the left sidebar, choose User Groups, and then select Create Group.\nUnder the Name the group section, enter the Group name (For example: AdminGroup), and scroll down.\nIn the Attach permissions policies section, type AdministratorAccess in the search bar and select it. Finally, click on Create Group.\nThe creation of the admin group is complete.\nCreate Admin User You can use the AWS Management Console to create IAM users.\nFollow the sign-in procedure appropriate to your user type as described in the topic How to sign in to AWS in the AWS Sign-In User Guide.\nOn the Console Home page, select the IAM service.\nIn the navigation pane, select Users, and then select Add users.\nOn the Specify user details page, under User details, enter the new user\u0026rsquo;s name in the User name field. This will be their sign-in name for AWS.\nNote: User names can be up to 64 letters, digits, and certain characters: plus (+), equal (=), comma (,), period (.), at sign (@), underscore (_), and hyphen (-). User names must be unique within an account, and they are case-sensitive when used in policies or ARNs. However, they are case-insensitive during the sign-in process.\nSelect Provide user access to the AWS Management Console. This generates AWS Management Console sign-in credentials for the new user.\nYou\u0026rsquo;ll be asked whether you\u0026rsquo;re providing console access to a person. It\u0026rsquo;s recommended to create users in IAM Identity Center rather than IAM. To switch to creating the user in IAM Identity Center, select Specify a user in Identity Center.\nIf IAM Identity Center is not enabled, this option takes you to the service page in the console to enable it. If IAM Identity Center is enabled, this option takes you to the Specify user details page in IAM Identity Center. If you cannot use IAM Identity Center, select I want to create an IAM user and continue following this procedure.\nFor Console password, choose one of the following:\nAutogenerated password: The user gets a randomly generated password that adheres to the account password policy. You can view or download the password on the Retrieve password page. Custom password: Assign a password that you enter in the box. Optionally, select Users must create a new password at next sign-in (recommended) to ensure the user changes their password the first time they sign in.\nSelect Next.\nOn the Set permissions page, choose how to assign permissions for this user:\nAdd user to group: Assign the user to one or more groups with existing permissions policies. Copy permissions: Copy permissions from an existing user with similar needs. Attach policies directly: Attach AWS managed or custom policies directly to the user. It\u0026rsquo;s recommended to attach policies to groups whenever possible.\nOptionally, set a permissions boundary in the Permissions boundary section. This is an advanced feature that controls maximum permissions.\nSelect Next.\nOptionally, on the Review and create page, under Tags, you can attach metadata to the user using key-value pairs.\nReview your choices, and when ready, select Create user.\nOn the Retrieve password page, get the password assigned to the user:\nSelect Show next to the password to view it manually.\nSelect Download .csv to save the user\u0026rsquo;s sign-in credentials as a .csv file.\nSelect Email sign-in instructions to customize and send an email to the user. The email includes their user name and a URL to the account sign-in page:\nUser name URL: https://AWS-account-ID-or-alias.signin.aws.amazon.com/console Note: The user\u0026rsquo;s password is not included in the email.\nIf the user also requires access keys, refer to Managing access keys for IAM users.\nLogin to AdminUser Return to the IAM service, and select Users in the left sidebar. Click on the name of the IAM User you just selected. In the Summary section, select the Security credentials tab. Look at the line Summary: Console sign-in link and copy the link next to it. This is the link you use to log in to the IAM User. Open an incognito tab of the browser you are using and paste the link into the search bar. Incognito tab login allows you to log in to AWS with an IAM User without having to log out of the root user in the main tab.\nEnter the correct IAM User name and password that you entered in the create IAM User section above. Click sign in. Congratulations, you have successfully accessed your account as an IAM User AdminUser. In The next step, we will switch to using IAM Role to improve the security of your account. Creating Access Key for AWS Root User Minimum Required Permissions To perform the following steps, you need at least the following IAM (Identity and Access Management) permissions:\nYou must log in as the root user of AWS, which does not require any additional IAM permissions. These steps cannot be performed as an IAM user or a role.\nUse the email address and password of your AWS account to sign in to the AWS Management Console as the root user.\nIn the top-right corner of the console, select your account name or number, then choose \u0026ldquo;Security Credentials\u0026rdquo;.\nUnder \u0026ldquo;Access keys,\u0026rdquo; select \u0026ldquo;Create access key.\u0026rdquo; If this option is unavailable, it means you have the maximum number of access keys. You must delete one of the existing access keys before creating a new one. For more information, see IAM Object Quotas in the IAM User Guide.\nOn the \u0026ldquo;Alternatives to root user access keys\u0026rdquo; page, consider security recommendations. To proceed, check the box and then select \u0026ldquo;Create access key.\u0026rdquo;\nOn the \u0026ldquo;Retrieve access key\u0026rdquo; page, your Access Key ID will be displayed.\nUnder the \u0026ldquo;Secret access key\u0026rdquo; section, select \u0026ldquo;Show,\u0026rdquo; then copy the Access Key ID and Secret Key from your browser window and paste them into a secure location. Alternatively, you can select \u0026ldquo;Download .csv file\u0026rdquo; to download a file named \u0026ldquo;rootkey.csv\u0026rdquo; containing the Access Key ID and Secret Key. Keep the file in a secure location.\nSelect \u0026ldquo;Done.\u0026rdquo; When you no longer need the access key, we recommend either deleting it or at least considering disabling it to prevent misuse.\nNote: These steps apply only to the root user account on AWS. For IAM users or roles, the process of creating and managing access keys may differ.\nRevoking Access Key for Root User on AWS Minimum Permissions To perform the following steps, you must have at least the following IAM (Identity and Access Management) permissions:\nYou must be logged in as the root user of your AWS account, this does not require any additional AWS Identity and Access Management (IAM) permissions. You cannot perform these steps as an IAM user or a role. Use the email address and password of your AWS account to sign in to the AWS Management Console as the root user. In the top-right corner of the console, select your account name or number, then choose Security Credentials. Under Access keys, select the access key you wish to delete, then in the Actions section, choose Delete. Note Alternatively, you can choose to Deactivate an access key instead of permanently deleting it. This allows you to continue using it in the future without changing both the key ID and secret key. While the key is deactivated, any requests using it in AWS API requests will fail with an \u0026ldquo;access denied\u0026rdquo; error.\nIn the Delete dialog, select Deactivate, enter the access key ID to confirm your intention to delete it, then choose Delete.\n"
},
{
	"uri": "//localhost:1313/1-create-new-aws-account/1.3-create-key-pair/",
	"title": "Create Key Pair",
	"tags": [],
	"description": "",
	"content": "In the Network \u0026amp; Security section of the EC2 interface:\nSelect Key Pairs Select Create key pair In the initialization interface:\nIn the Name section, set it to ecourse-key In the Key pair type section, select RSA In the Private key file format section, select .pem Scroll down to the bottom of the page and select Create key pair Key pair is required when initializing EC2.\n"
},
{
	"uri": "//localhost:1313/2-mfa-setup-for-aws-user-root/2.3-config-ec2-instance/",
	"title": "EC2 Instance Configuration and Backend Deployment",
	"tags": [],
	"description": "",
	"content": "Open CMD: Enter the following command:\nAWS Configure AWS Access Key ID: enter Key ID AWs Secret Access Key ID: enter Secret Key ID Default region name: select region, here is us-east-1 Default output format: enter json Ssh to EC2 with the command ssh -i \u0026#34;C:\\path\\to\\key.pem\u0026#34; ubuntu@[EC2-PUBLIC-IP] Replace C:\\path\\to\\ecourse-key.pem with the actual path to the key file.\nReplace [EC2-PUBLIC-IP] with EC2\u0026rsquo;s public IP.\nAfter SSH is successful, run the following commands:\n# Update system sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y # Install Node.js 18.x curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - sudo apt-get install -y nodejs # Install PM2 (process manager) sudo npm install -g pm2 # Install Nginx (web server) sudo apt install nginx -y # Install Git sudo apt install git -y # Check the installation node --version npm --version After installing the necessary paths, we will clone the back end project on git to prepare for deployment to EC2.\nrun the following commands:\n# Clone your backend repository git clone [your-backend-repo-url] cd [your-backend-directory] # Install dependencies npm install # Create environment file cat \u0026gt; .env \u0026lt;\u0026lt; EOF MONGODB_URI=mongodb+srv://ecourse_user:[password]@ecourse-cluster.xxxxx.mongodb.net/ecourse PORT=3000 NODE_ENV=production JWT_SECRET=[your-jwt-secret] EOF Replace [your-backend-repo-url] with the backend repository URL. The link \u0026ldquo;MONGODB_URI\u0026rdquo; has been created in section 1.4, please review. Replace [your-jwt-secret] with the secret key for JWT, located in the back end\u0026rsquo;s .env file. After cloning the project, continue running the following commands:\n# Build application npm run build # Start with PM2 pm2 start dist/main.js --name \u0026#34;ecourse-backend\u0026#34; # Save PM2 configuration pm2 save pm2 startups Then, create Nginx Configuration file\nsudo nano /etc/nginx/sites-available/ecourse Enter the following code:\nserver { listen 80; server_name [EC2_Public_IP]; # Redirect all HTTP to HTTPS return 301 https://$host$request_uri; } server { listen 443 ssl; server_name [EC2_Public_IP]; ssl_certificate /etc/ssl/certs/selfsigned.crt; ssl_certificate_key /etc/ssl/private/selfsigned.key; location / { proxy_pass http://localhost:3000; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#39;upgrade\u0026#39;; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_cache_bypass $http_upgrade; } } Replace [EC2-PUBLIC-IP] with EC2\u0026rsquo;s public IP. Continue running this command to create Ssl needed when deploying front end to Cloudfront because EC2 runs through HTTP method, while Cloudfront runs through HTTPS method:\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\ -keyout /etc/ssl/private/selfsigned.key \\ -out /etc/ssl/certs/selfsigned.crt Note: the above command only creates self-signed certificate for development. The best solution: Register a domain and point it to EC2 IP. Install free SSL with Let\u0026rsquo;s Encrypt for that domain. Then, the frontend calls API via https://api.yourdomain.com/\u0026hellip; is the most standard, without security warnings.\nAfter creating the Nginx file, reload it with the command:\nsudo nginx -t sudo systemctl reload nginx After running, test with Postman to check if the backend api is working:\n"
},
{
	"uri": "//localhost:1313/4-verify-new-account/",
	"title": "Account Authentication Support",
	"tags": [],
	"description": "",
	"content": "Content:\nCheck the information Create a support case with AWS Support During the AWS account creation process, at the contact phone number verification step, sometimes there will be a situation where no SMS or calls from AWS will be received. In that case, follow these steps to complete the account information verification:\nCheck the information First, double-check your account information and make sure it\u0026rsquo;s entered correctly:\nYou have entered the phone number information and selected the correct international area code to receive the call. If you use a mobile phone, check your phone to make sure you are still within range to receive calls. Payment method information has been entered correctly. Make sure that the phone number you provide in your AWS account is reachable.\nCreate a support case with AWS Support After checking that the information is correct but still has not received the verification call, AWS Support will assist you to activate your account manually.\nGo to the AWS Support console, select Create case. Select Account and billing support and enter the support information: Type: select Account. Category: select Activation. Subject: briefly write down your situation (eg Did not receive an SMS message or call for verification) Description: Provide details of the situation encountered and information about the time you need support to activate the account. Attachments: Attach an image describing the authentication step you are facing. Under Contact options, select Chat under Contact methods. Select Submit. 5. The AWS Support team will contact and assist in activating your account.\nYou can create a support request with AWS Support even if your account is not activated.\n"
},
{
	"uri": "//localhost:1313/1-create-new-aws-account/1.4-create-mongodb-database/",
	"title": "Configure database with MongoDB",
	"tags": [],
	"description": "",
	"content": "Cluster Configuration Account Configuration Access MongoDB homepage: MongoDB Create Mongo DB account After creating the account, on the main interface select Cluster Select Build a Cluster Cluster Configuration Select Cluster type: select Free Select Name: name appropriately, or leave the default as Cluster0 Select Provider: Check the AWS box Select Region: Select Region along with Region of EC2 and other services on AWS to avoid problems Check the information again, and select Create Deployment Create Cluster connection After completing the Cluster configuration, we come to the step of creating CLuster connection. On the Set up connection page, after granting permissions, the configurations can be left as default Go to the Choose a connection method page, in the Connect to your application section, select Drivers In section 3. , copy the link to the Cluster, in the form \u0026ldquo;mongodb+srv://\u0026lt;db_username\u0026gt;:\u0026lt;db_password\u0026gt;@cluster0\u0026hellip;\u0026rdquo;, replace \u0026lt;db_username\u0026gt; and \u0026lt;db_password\u0026gt; with username and password on the Set up connection page above. We need this link to connect to the database and EC2. "
},
{
	"uri": "//localhost:1313/5-aws-database-benchmarking-suite/",
	"title": "AWS Database Benchmarking Suite",
	"tags": [],
	"description": "",
	"content": "AWS Database Benchmarking Suite Overview In this workshop, you will build a comprehensive benchmarking suite to test the performance of various AWS database services under different workloads. You will learn how to design and deploy an automated benchmarking system, compare results, detect performance regressions, and create reporting dashboards.\nLearning Objectives Understand major AWS database services (RDS, DynamoDB, Aurora, ElastiCache) Design standardized testing methodology for database performance Build automated benchmark execution system Create result comparison tools and regression detection Design reporting dashboard Write best practices documentation Prerequisites Basic understanding of AWS services (EC2, IAM, CloudWatch) Knowledge of database concepts Experience with Python or Node.js Understanding of performance testing concepts Estimated Time Lab 5.1: 30 minutes - Setup environment and infrastructure Lab 5.2: 45 minutes - Design benchmark methodology Lab 5.3: 60 minutes - Build automated testing framework Lab 5.4: 45 minutes - Create comparison tools and regression detection Lab 5.5: 30 minutes - Build reporting dashboard Lab 5.6: 30 minutes - Write best practices documentation Estimated Cost RDS instances: ~$50-100 (depending on instance type and usage time) DynamoDB: ~$10-20 (for testing workload) EC2 instances: ~$20-40 (for benchmark runner) CloudWatch: ~$5-10 Total: ~$85-170 for entire workshop Important Note: This workshop will create AWS resources that incur costs. Please ensure to delete all resources after completion to avoid unnecessary charges.\nMain Content Setup Infrastructure and Environment Design Benchmark Methodology Build Automated Testing Framework Create Comparison Tools and Regression Detection Build Reporting Dashboard Write Best Practices Documentation Overall Architecture graph TD\rA[Benchmark Runner] --\u0026gt; B[RDS MySQL]\rA --\u0026gt; C[RDS PostgreSQL]\rA --\u0026gt; D[DynamoDB]\rA --\u0026gt; E[ElastiCache Redis]\rA --\u0026gt; F[Aurora]\rG[CloudWatch] --\u0026gt; A\rH[Results Storage] --\u0026gt; A\rI[Dashboard] --\u0026gt; H\rJ[Comparison Engine] --\u0026gt; H AWS Services to be used EC2: Benchmark runner instances RDS: MySQL, PostgreSQL, Aurora databases DynamoDB: NoSQL database testing ElastiCache: Redis caching layer CloudWatch: Monitoring and metrics S3: Store benchmark results Lambda: Automated cleanup and processing IAM: Security and permissions "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]